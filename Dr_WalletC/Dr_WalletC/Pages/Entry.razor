@page "/entry"
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
@using Microsoft.EntityFrameworkCore
@using Dr_WalletC.Data
@using Dr_WalletC.Models
@inject ApplicationDbContext _context
@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager
@using System.Security.Claims

<div class="text-center">
    <h1>プロフィール設定</h1>
    <p>初めての方はご入力ください</p>
    <EditForm Model="@user" OnSubmit="OnAdd">
        <div class="text-danger">@errorMessage</div>
        <div class="form-group ">
            <label asp-for="User.Name" class="control-label">名前</label>
            <input asp-for="User.Name" class="form-control" @bind-value="@user.Name" />
        </div>
        <div class="form-group ">
            <label asp-for="User.Household" class="control-label">家族構成</label>
            <select @bind="SelectedHousehold" class="form-control">
                <option value="">-- 選択してください --</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
            </select>
        </div>
        <div class="form-group">
            <label asp-for="User.YearlyIncome" class="control-label">年収</label>
            <input asp-for="User.YearlyIncome" class="form-control" @bind-value="@user.YearlyIcome" />
        </div>
        <div class="form-group">
            <button class="btn btn-primary">登録</button>
        </div>
    </EditForm>
</div>

@* <h1>Hello, world!</h1>
<h5>ログインユーザID: @userId</h5>
<h5>ログインユーザ名: @loginName</h5>


 *@
@code {
    private string loginName = "";
    private UserAccount user = new UserAccount();
    private string errorMessage = "";
    private string userId;
    private int SelectedHousehold { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // AuthenticationStateProviderから現在の認証状態を取得
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var authUser = authState.User;
        // ユーザーが認証済みの場合は、Identity.Nameからログイン名を取得して返す
        if (authUser.Identity.IsAuthenticated)
        {
            // ログイン名取得
            loginName = authUser.Identity.Name;
            // ログインID取得
            userId = authUser.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            user.UserAccountId = userId;
        }
    }

    private void OnAdd()
    {
        errorMessage = " 登録完了...";
        try
        {
            user.Household = SelectedHousehold;
            _context.Add(user);
            _context.SaveChanges();

        }
        catch (Exception e)
        {
            errorMessage = e.Message + "の問題が起こりました。";
        }
    }

}
