@page "/bopform"
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
@using Microsoft.EntityFrameworkCore
@using Dr_WalletC.Data
@using Dr_WalletC.Models
@inject ApplicationDbContext _context
@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization;


<div class="text-center">
    <h1>収支入力</h1>
    <EditForm Model="@balance" OnSubmit="OnAdd">
        <div class="text-danger">@errorMessage</div>

        <div class="form-group ">
            <label asp-for="Balance.CategoryId" class="control-label ">カテゴリ-</label>
            <select @bind="SelectedCategoryId" 　class="form-control">
                <option value="">-- 選択してください --</option>
                @foreach (var category in categories)
                {
                    <option value="@category.CategoryId">@category.CategoryName</option>
                }
            </select>
        </div>
        <div class="form-group ">
            <label asp-for="Balance.Bop" class="control-label text-center ">収支</label>
            <select @bind="SelectedBalance" 　class="form-control">
                <option value="">-- 選択してください --</option>
                <option value="@balance.Bop">支出</option>
                <option value="@balance.Bop">収入</option>
            </select>
        </div>
        <div class="form-group ">
            <label asp-for="Balance.Price" class="control-label">金額</label>
            <input asp-for="Balance.Price" class="form-control" @bind-value="@balance.Price" />
        </div>
        <div class="form-group">
            <button class="btn btn-primary">登録</button>
        </div>
    </EditForm>
</div>

@* <h1>Hello, world!</h1>
<h5>ログインユーザID: @userId</h5>
<h5>ログインユーザ名: @loginName</h5>
<h5>@nowDt </h5> *@
@code {

    private string loginName = "";
    private Balance balance = new Balance();
    private string errorMessage = "";
    private string userId;
    private DateTime nowDt = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        // AuthenticationStateProviderから現在の認証状態を取得
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var authuser = authState.User;
        // ユーザーが認証済みの場合は、Identity.Nameからログイン名を取得して返す
        if (authuser.Identity.IsAuthenticated)
        {
            // ログイン名取得
            loginName = authuser.Identity.Name;
            // ログインID取得
            userId = authuser.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            balance.UserAccountId = userId;
            // var obj = DateTime.SpecifyKind(nowDt, DateTimeKind.Utc);
            // balance.DateTime = obj;
            balance.DateTime = nowDt.ToUniversalTime();
        }
        else
        {
            NavManager.NavigateTo("/");
        }
        await LoadCategories();
    }

    private void OnAdd()
    {
        errorMessage = "add person...";
        try
        {

            balance.CategoryId = SelectedCategoryId;
            balance.Bop = SelectedBalance;
            _context.Add(balance);
            _context.SaveChanges();

        }
        catch (Exception e)
        {
            errorMessage = e.Message + "の問題が起こりました。";
        }
    }

    //カテゴリと収支のプルダウン
    private List<Category> categories = new List<Category>();

    private int SelectedCategoryId { get; set; }
    private string? SelectedBalance { get; set; }

    private async Task LoadCategories()
    {
        categories = await _context.Category.ToListAsync();
    }

}
