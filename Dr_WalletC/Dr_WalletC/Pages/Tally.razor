@page "/tallys"
@using Dr_WalletC.Data;
@using Dr_WalletC.Models
@using Microsoft.EntityFrameworkCore;
@inject ApplicationDbContext _context
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<IdentityUser> UserManager
@using System.Security.Claims


<PageTitle>Counter</PageTitle>

<EditForm Model="@years" OnSubmit="OnAdd">
    <div class="form-group col-md-4">
        <label class="control-label">西暦</label>
        <select @bind="SelectedYear" class="form-control">
            <option value="">-- 選択してください --</option>
            <option value="@years.YearsId">2024</option>
            <option value="@years.YearsId">2025</option>
            <option value="@years.YearsId">2026</option>
            <option value="@years.YearsId">2027</option>
            <option value="@years.YearsId">2028</option>
            <option value="@years.YearsId">2029</option>
            <option value="@years.YearsId">2030</option>
            <option value="@years.YearsId">2031</option>
            <option value="@years.YearsId">2032</option>
            <option value="@years.YearsId">2033</option>
            <option value="@years.YearsId">2034</option>
        </select>
    </div>
    <div class="form-group col-md-4">
        <label class="control-label">月</label>
        <select @bind="SelectMonth" 　class="form-control">
            <option value="">-- 選択してください --</option>
            <option value="@years.Month">04</option>
            <option value="@years.Month">05</option>
            <option value="@years.Month">06</option>
            <option value="@years.Month">07</option>
            <option value="@years.Month">08</option>
            <option value="@years.Month">09</option>
            <option value="@years.Month">10</option>
            <option value="@years.Month">11</option>
            <option value="@years.Month">12</option>
        </select>
    </div>
    <div class="form-group">
        <button class="btn btn-primary">完了</button>
    </div>
</EditForm>

<SfDashboardLayout Columns="6" AllowResizing=true>
    <DashboardLayoutPanels>
        <DashboardLayoutPanel Column="0" Row="0" SizeX="2" SizeY="1">
            <HeaderTemplate>収入</HeaderTemplate>
            <ContentTemplate>
                <br />
                <h1>￥@SumIncome</h1>
            </ContentTemplate>
        </DashboardLayoutPanel>
        <DashboardLayoutPanel Column="2" Row="0" SizeX="2" SizeY="1">
            <HeaderTemplate>支出</HeaderTemplate>
            <ContentTemplate>
                <br />
                <h1>￥@SumExpense</h1>
            </ContentTemplate>
        </DashboardLayoutPanel>
        <DashboardLayoutPanel Column="4" Row="0" SizeX="2" SizeY="1">
            <HeaderTemplate>残高</HeaderTemplate>
            <ContentTemplate>
                <br />
                <h1>￥@Balance</h1>
            </ContentTemplate>
        </DashboardLayoutPanel>
        <DashboardLayoutPanel Column="0" Row="1" SizeX="2" SizeY="3">
            <HeaderTemplate>支出の割合</HeaderTemplate>
            <ContentTemplate>
                <button class="btn btn-primary btn-sm py-0" onclick="pieChartTest(@Food1,@Hobby2,@Carfare3,@Clothes4,@Expenses5,@Education6,@Water7,@Communication8,@Rent9,@Insurance10)">表示</button>
                <div class="chart-container" style="position: relative; height:400px; width:600px ">
                    <canvas id="myChart" style="text-align:center"></canvas>
                </div>
            </ContentTemplate>
        </DashboardLayoutPanel>
        <DashboardLayoutPanel Column="2" Row="1" SizeX="4" SizeY="3">
            <HeaderTemplate>カテゴリー別合計</HeaderTemplate>
            <ContentTemplate>
                @*   <div style="text-align:left">
                <br />
                <br />
                <h2> &emsp;&emsp; &emsp; &emsp; &emsp;食費   @Food1  &emsp; &emsp;&emsp;趣味・娯楽 @Hobby2 </h2>
                <h2> &emsp;&emsp; &emsp; &emsp; &emsp;交通費 @Carfare3 &emsp; &emsp;衣服・美容 @Clothes4</h2>
                <h2> &emsp;&emsp; &emsp; &emsp; &emsp;特別費 @Expenses5 &emsp; &emsp;教養・教育 @Education6</h2>
                <h2> &emsp;&emsp; &emsp; &emsp; &emsp;水道費 @Water7 &emsp; &emsp;通信費 @Communication8</h2>
                <h2> &emsp;&emsp; &emsp; &emsp; &emsp;家賃   @Rent9 &emsp; &emsp;税・保険 @Insurance10</h2>
                </div> *@
                <table class="table">
                    <thead>
                        <tr>
                            <th>カテゴリー</th>
                            <th>合計</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in sumCategories)
                        {
                            <tr>
                                <td>@item.Category</td>
                                <td>@item.SumCategorys</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </ContentTemplate>
        </DashboardLayoutPanel>
    </DashboardLayoutPanels>
</SfDashboardLayout>

<style>
    h1 {
        color: #0bd;
        font-size: 70px;
    }

    h2 {
        color: #647ff7;
        font-size: 43px;
    }

    table {
        font-size: 18px;
    }

    tr {
        color: #647ff7;
    }
</style>

@* <h1>Hello, world!</h1>
<h5>ログインユーザID: @userId</h5>
<h5>ログインユーザ名: @loginName</h5>
<h5>@nowDt </h5> *@


@foreach (var items in Expense)
{
    SumExpense += items.Price;
}
@foreach (var items in Income)
{
    SumIncome += items.Price;
}

@foreach (var items in Food)
{
    Food1 += items.Price;
}
@foreach (var items in Hobby)
{
    Hobby2 += items.Price;

}
@foreach (var items in Carfare)
{
    Carfare3 += items.Price;
}
@foreach (var items in Clothes)
{
    Clothes4 += items.Price;
}
@foreach (var items in Expenses)
{
    Expenses5 += items.Price;
}
@foreach (var items in Education)
{
    Education6 += items.Price;
}

@foreach (var items in Water)
{
    Water7 += items.Price;
}

@foreach (var items in Communication)
{
    Communication8 += items.Price;
}
@foreach (var items in Rent)
{
    Rent9 += items.Price;
}
@foreach (var items in Insurance)
{
    Insurance10 += items.Price;
}
@{
    Balance = SumIncome - SumExpense;
    sumCategories = new()
    {
       new SumCategory("食費", Food1),
       new SumCategory("趣味/娯楽", Hobby2),
       new SumCategory("交通費", Carfare3),
       new SumCategory("衣服/美容", Clothes4),
       new SumCategory("特別費", Expenses5),
       new SumCategory("教養/教育", Education6),
       new SumCategory("水道費", Water7),
       new SumCategory("通信費", Communication8),
       new SumCategory("家賃", Rent9),
       new SumCategory("税/保険", Insurance10),
    };
}

<style>
    .e-panel-header {
        text-align: center
    }

    .e-panel-content {
        text-align: center;
        margin-top: 10px;
    }
</style>

@code {

    public List<SumCategory> sumCategories { get; set; }
    public IList<Balance>? Expense { get; set; }
    public IList<Balance>? Income { get; set; }
    public IList<Balance>? Food { get; set; }
    public IList<Balance>? Hobby { get; set; }
    public IList<Balance>? Carfare { get; set; }
    public IList<Balance>? Clothes { get; set; }
    public IList<Balance>? Expenses { get; set; }
    public IList<Balance>? Education { get; set; }
    public IList<Balance>? Water { get; set; }
    public IList<Balance>? Communication { get; set; }
    public IList<Balance>? Rent { get; set; }
    public IList<Balance>? Insurance { get; set; }


    public int IncomeSUM { get; set; }

    public int SumExpense { get; set; }
    public int SumIncome { get; set; }
    public int Balance { get; set; }

    public int Food1 { get; set; }
    public int Hobby2 { get; set; }
    public int Carfare3 { get; set; }
    public int Clothes4 { get; set; }
    public int Expenses5 { get; set; }
    public int Education6 { get; set; }
    public int Water7 { get; set; }
    public int Communication8 { get; set; }
    public int Rent9 { get; set; }
    public int Insurance10 { get; set; }



    private Years years = new Years();
    private string loginName = "";
    private Balance balance = new Balance();
    private string errorMessage = "";

    private string userId;
    private DateTime nowDt = DateTime.Now;
    protected override async Task OnInitializedAsync()
    {
        // AuthenticationStateProviderから現在の認証状態を取得
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var authuser = authState.User;
        // ユーザーが認証済みの場合は、Identity.Nameからログイン名を取得して返す
        if (authuser.Identity.IsAuthenticated)
        {
            // ログイン名取得
            loginName = authuser.Identity.Name;
            // ログインID取得
            userId = authuser.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            balance.UserAccountId = userId;
            // var obj = DateTime.SpecifyKind(nowDt, DateTimeKind.Utc);
            // balance.DateTime = obj;
            balance.DateTime = nowDt.ToUniversalTime();

            IQueryable<Balance> reslutE = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"Bop\" = '支出' AND \"UserAccountId\" = '{userId}'");

            IQueryable<Balance> reslutI = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"Bop\" = '収入' AND \"UserAccountId\" = '{userId}'");

            IQueryable<Balance> reslut1 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 1 AND \"UserAccountId\" = '{userId}'");

            IQueryable<Balance> reslut2 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 2 AND \"UserAccountId\" = '{userId}'");

            IQueryable<Balance> reslut3 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 3 AND \"UserAccountId\" = '{userId}'");

            IQueryable<Balance> reslut4 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 4 AND \"UserAccountId\" = '{userId}'");

            IQueryable<Balance> reslut5 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 5 AND \"UserAccountId\" = '{userId}'");

            IQueryable<Balance> reslut6 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 6 AND \"UserAccountId\" = '{userId}'");

            IQueryable<Balance> reslut7 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 7 AND \"UserAccountId\" = '{userId}'");

            IQueryable<Balance> reslut8 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 8 AND \"UserAccountId\" = '{userId}'");

            IQueryable<Balance> reslut9 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 9 AND \"UserAccountId\" = '{userId}'");

            IQueryable<Balance> reslut10 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 10 AND \"UserAccountId\" = '{userId}'");

            Food = reslut1.ToList();
            Hobby = reslut2.ToList();
            Carfare = reslut3.ToList();
            Clothes = reslut4.ToList();
            Expenses = reslut5.ToList();
            Education = reslut6.ToList();
            Water = reslut7.ToList();
            Communication = reslut8.ToList();
            Rent = reslut9.ToList();
            Insurance = reslut10.ToList();



            Expense = reslutE.ToList();
            Income = reslutI.ToList();



        }
    }

    public string? SelectedYear { get; set; }
    public string? SelectMonth { get; set; }
    public string? Year { get; set; }
    public string? Month { get; set; }

    // 更新
    private void OnAdd()
    {
        Year = SelectedYear;
        Month = SelectMonth;

        Food1 = 0;
        Hobby2 = 0;
        Carfare3 = 0;
        Clothes4 = 0;
        Expenses5 = 0;
        Education6 = 0;
        Water7 = 0;
        Communication8 = 0;
        Rent9 = 0;
        Insurance10 = 0;
        SumExpense = 0;
        SumIncome = 0;

        IQueryable<Balance> reslutE = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"Bop\" = '支出' AND \"UserAccountId\" = '{userId}' AND to_char(\"DateTime\",'yyyy年mm月') = '{SelectedYear}年{SelectMonth}月'");

        IQueryable<Balance> reslutI = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"Bop\" = '収入' AND \"UserAccountId\" = '{userId}' AND to_char(\"DateTime\",'yyyy年mm月') = '{SelectedYear}年{SelectMonth}月'");

        IQueryable<Balance> reslut1 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 1 AND \"UserAccountId\" = '{userId}'AND to_char(\"DateTime\",'yyyy年mm月') = '{SelectedYear}年{SelectMonth}月'");

        IQueryable<Balance> reslut2 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 2 AND \"UserAccountId\" = '{userId}'AND to_char(\"DateTime\",'yyyy年mm月') = '{SelectedYear}年{SelectMonth}月'");

        IQueryable<Balance> reslut3 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 3 AND \"UserAccountId\" = '{userId}'AND to_char(\"DateTime\",'yyyy年mm月') = '{SelectedYear}年{SelectMonth}月'");

        IQueryable<Balance> reslut4 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 4 AND \"UserAccountId\" = '{userId}'AND to_char(\"DateTime\",'yyyy年mm月') = '{SelectedYear}年{SelectMonth}月'");

        IQueryable<Balance> reslut5 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 5 AND \"UserAccountId\" = '{userId}'AND to_char(\"DateTime\",'yyyy年mm月') = '{SelectedYear}年{SelectMonth}月'");

        IQueryable<Balance> reslut6 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 6 AND \"UserAccountId\" = '{userId}'AND to_char(\"DateTime\",'yyyy年mm月') = '{SelectedYear}年{SelectMonth}月'");

        IQueryable<Balance> reslut7 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 7 AND \"UserAccountId\" = '{userId}'AND to_char(\"DateTime\",'yyyy年mm月') = '{SelectedYear}年{SelectMonth}月'");

        IQueryable<Balance> reslut8 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 8 AND \"UserAccountId\" = '{userId}'AND to_char(\"DateTime\",'yyyy年mm月') = '{SelectedYear}年{SelectMonth}月'");

        IQueryable<Balance> reslut9 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 9 AND \"UserAccountId\" = '{userId}'AND to_char(\"DateTime\",'yyyy年mm月') = '{SelectedYear}年{SelectMonth}月'");

        IQueryable<Balance> reslut10 = _context.Balance.FromSqlRaw($"SELECT * FROM \"Balance\" WHERE \"CategoryId\" = 10 AND \"UserAccountId\" = '{userId}'AND to_char(\"DateTime\",'yyyy年mm月') = '{SelectedYear}年{SelectMonth}月'");


        Food = reslut1.ToList();
        Hobby = reslut2.ToList();
        Carfare = reslut3.ToList();
        Clothes = reslut4.ToList();
        Expenses = reslut5.ToList();
        Education = reslut6.ToList();
        Water = reslut7.ToList();
        Communication = reslut8.ToList();
        Rent = reslut9.ToList();
        Insurance = reslut10.ToList();



        Expense = reslutE.ToList();
        Income = reslutI.ToList();

    }
}


